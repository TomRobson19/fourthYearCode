#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 3 0 7 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bioinformatics Summative Assignment
\end_layout

\begin_layout Author
hzwr87
\end_layout

\begin_layout Section

\series bold
This question is about the Build algorithm from [1].
 
\end_layout

\begin_layout Subsection

\series bold
Explain what the algorithm does and how it works in your own words.
 Do not use pseudocode [25 marks] 
\end_layout

\begin_layout Standard
The BUILD algorithm recursively builds a tree using constraints of the form
 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

where 
\begin_inset Formula $i\neq j$
\end_inset

 and
\begin_inset Formula $k\neq l$
\end_inset

.
 This notation means that the lowest common ancestor of 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 is a proper descendant of the lowest common ancestor of 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

.
 The algorithm itself requires a set of constraints and and a non-empty
 set of nodes.
 If the set of nodes has only 1 element, then the algorithm returns a tree
 consisting of this element alone.
 Otherwise, the set of nodes is partitioned into blocks based on 3 rules.
 
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

 is a constraint, then both 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 are in the same block 
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

 is a constraint, and 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 are in the same block, then 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, and 
\begin_inset Formula $l$
\end_inset

 are all in the same block.
\end_layout

\begin_layout Enumerate
No two nodes are in the same block unless specified by the above rules.
 
\end_layout

\begin_layout Standard
For each of the blocks created by this partitioning method, we find which
 of the original constraints are relevant to each block, which means all
 of 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, and 
\begin_inset Formula $l$
\end_inset

 are in this block.
 We then call the BUILD algorithm again with this new set of constraints
 and nodes.
 This continues BUILD is called on only 1 node, in which case it returns
 a tree consisting of only this node, which will be a leaf of the overall
 tree, which is built up from these leaves.
\end_layout

\begin_layout Subsection

\series bold
Expand the partition step in pseudocode: compute 
\begin_inset Formula $\pi_{C}=S_{1},S_{2},...S_{r};$
\end_inset

 [20 marks] 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout LyX-Code
\begin_inset Formula $\pi=S$
\end_inset


\end_layout

\begin_layout LyX-Code
//Apply rule 1
\end_layout

\begin_layout LyX-Code
for c in C:
\end_layout

\begin_deeper
\begin_layout LyX-Code
i,j,k,l = c
\end_layout

\begin_layout LyX-Code
if i and j are not in the same block:
\end_layout

\begin_deeper
\begin_layout LyX-Code
merge blocks in 
\begin_inset Formula $\pi$
\end_inset

 containing i and j
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
repeat
\end_layout

\begin_layout LyX-Code
//Apply rule 2
\end_layout

\begin_layout LyX-Code
for c in C:
\end_layout

\begin_deeper
\begin_layout LyX-Code
i,j,k,l = c
\end_layout

\begin_layout LyX-Code
if k and l are in the same block of 
\begin_inset Formula $\pi$
\end_inset

 and i and j are in a different block of 
\begin_inset Formula $\pi$
\end_inset

 :
\end_layout

\begin_deeper
\begin_layout LyX-Code
merge blocks of 
\begin_inset Formula $\pi$
\end_inset

 containing i, j and k, l
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
end repeat if rule 2 had no effect
\end_layout

\begin_layout LyX-Code
return 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Partition Step of BUILD(S,C)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Write a recurrence that expresses the running time of Build depending on
 the number of different leaf-labels n and the number of constraints m.
 Use it to estimate the running time of the algorithm assuming that the
 partitioning step runs in time 
\begin_inset Formula $f(n,m)$
\end_inset

 for some function monotonically non-decreasing function f.
 [25 marks]
\end_layout

\begin_layout Standard
Here we assume that the partition step from the previous question runs in
 
\begin_inset Formula $f(n,m)$
\end_inset

 time.
 As this is monotonic, it will always be expressed below as the worst case
 
\begin_inset Formula $f(n,m)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $T(1,m)=O(1)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=KT(n-1,m)+f(n,m)$
\end_inset


\end_layout

\begin_layout Standard
Where K is the number of sets in the the partition 
\begin_inset Formula $\pi_{C}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=K(K^{'}T(n-2,m)+f(n,m))+f(n,m)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=K(K^{'}(K^{''}T(n-3,m)+f(n,m))+f(n,m))+f(n,m)$
\end_inset


\end_layout

\begin_layout Standard
The number of calls to BUILD referred to by 
\begin_inset Formula $K\times K^{'}\times K^{''}...$
\end_inset

 is bounded by 
\begin_inset Formula $(2n-1)$
\end_inset

, and the number of partioning calls (i.e.
 calls to 
\begin_inset Formula $f(n,m)$
\end_inset

) is bounded by 
\begin_inset Formula $(n-1)$
\end_inset

, we can infer:
\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=(2n-1)T(1,0)+(n-1)f(n,m)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=(2n-1)O(1)+(n-1)f(n,m)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $T(n,m)=O(n+nf(n,m))$
\end_inset


\end_layout

\begin_layout Subsection

\series bold
Run the algorithm on the following set of constraints.
 You should show the partitioning and the recursive calls at each stage.
 [25 marks]
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(e,f)<(k,d)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,h)<(a,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,n)<(j,l)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,a)<(f,h)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,l)<(e,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(n,l)<(a,f)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(d,i)<(k,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(d,i)<(g,i)$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Enumerate

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout

[9.]
\backslash
setcounter{enumi}{9}
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(c,l)<(g,k)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(g,b)<(g,i)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(g,i)<(d,m)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,h)<(c,a)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(e,f)<(h,l)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,l)<(j,a)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(k,m)<(e,i)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,b,c,d,e,f,g,h,i,j,k,l,m,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(e,f)<(k,d)$
\end_inset

 , 
\begin_inset Formula $(c,h)<(a,n)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,l)$
\end_inset

 , 
\begin_inset Formula $(c,a)<(f,h)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(e,n)$
\end_inset

 , 
\begin_inset Formula $(n,l)<(a,f)$
\end_inset

 , 
\begin_inset Formula $(d,i)<(k,n)$
\end_inset

 , 
\begin_inset Formula $(d,i)<(g,i)$
\end_inset

 , 
\begin_inset Formula $(c,l)<(g,k)$
\end_inset

 , 
\begin_inset Formula $(g,b)<(g,i)$
\end_inset

 , 
\begin_inset Formula $(g,i)<(d,m)$
\end_inset

 , 
\begin_inset Formula $(c,h)<(c,a)$
\end_inset

 , 
\begin_inset Formula $(e,f)<(h,l)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(j,a)$
\end_inset

 , 
\begin_inset Formula $(k,m)<(e,i)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $e,f$
\end_inset

), (
\begin_inset Formula $a,c,h,j,l,n$
\end_inset

), (
\begin_inset Formula $b,d,g,i$
\end_inset

), (
\begin_inset Formula $k,m$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 gives the blocks (
\begin_inset Formula $a,c,e,f,h,j,l,n$
\end_inset

), (
\begin_inset Formula $b,d,g,i$
\end_inset

), (
\begin_inset Formula $k,m$
\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,c,e,f,h,j,l,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(a,n)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,l)$
\end_inset

 , 
\begin_inset Formula $(c,a)<(f,h)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(e,n)$
\end_inset

 , 
\begin_inset Formula $(n,l)<(a,f)$
\end_inset

 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(c,a)$
\end_inset

 , 
\begin_inset Formula $(e,f)<(h,l)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(j,a)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $a,c,h$
\end_inset

), (
\begin_inset Formula $j,l,n$
\end_inset

), (
\begin_inset Formula $e,f$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,c,h)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(c,a)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $c,h$
\end_inset

), (
\begin_inset Formula $a$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(c,h)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(c)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node c.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(h)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node h.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node a.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j,l,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(j,n)<(j,l)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $j,n$
\end_inset

), (
\begin_inset Formula $l$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j,n)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node j.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(n)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node n.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(l)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node l.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(e,f)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(e)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node e.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(f)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node f.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b,d,g,i)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(d,i)<(g,i)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
 , 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(g,b)<(g,i)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $d,i$
\end_inset

), (
\begin_inset Formula $b,g$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(d,i)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(d)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node d.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(i)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node i.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b,g)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node b.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(g)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node g.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(k,m)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(k)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node k.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(m)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node m.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center

\emph on
\begin_inset Graphics
	filename Bio.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Final tree produced by BUILD on this set of nodes and constraints
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Reverse the Build algorithm, i,e.
 design an algorithm that takes a tree with labelled leaves as an input,
 and produces a set of constraints of the form 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

, such that when Build runs on that set, the result is (an isomorphic copy
 of) the input tree.
 Prove the correctness of your algorithm.
 Also, a smaller output (number of constraints) would give you a better
 mark.
 [30 marks]
\end_layout

\begin_layout Standard
The reverse of the BUILD algorithm can best be described as a sequence of
 steps.
\end_layout

\begin_layout Enumerate
Label each internal node of the tree with the Lowest Common Ancestor of
 two of the leaves of its children.
 For example, the root of the tree from the previous question could be labelled
 
\begin_inset Formula $(c,m)$
\end_inset


\end_layout

\begin_layout Enumerate
Any leaf that is not referred to by any of the internal node constraints
 should get a label of itself and a leaf descendent of one of its siblings.
 (This occurs when an internal node has 3 or more leaf children).
\end_layout

\begin_layout Enumerate
Remove all leaves that have not been labelled by step 2 from the tree.
 
\end_layout

\begin_layout Enumerate
Create a constraint for each of the remaining nodes of the tree, of the
 form (node) < (parent).
 There are 2 sub conditions
\end_layout

\begin_deeper
\begin_layout Enumerate
The root is not on the left-hand-side of any constraint
\end_layout

\begin_layout Enumerate
The leaf constraints from step 2 must be labelled of the form (node) < (parent's
 parent) to ensure that they are true descendents.
\end_layout

\end_deeper
\begin_layout Standard
This ensures that all of the leaves of the tree will appear on the left-hand-sid
e of at least one constraint, so will all be appropriately represented in
 the final graph.
 If the tree is binary, then all leaves will appear in the label of their
 parent.
 Due to the formation of the constraints as (children)<(parent), the correct
 subtree structure will be preserved.
 In the case of a non binary tree, there will be children that are not represent
ed by their parent's label.
 The constraint added by step 2 of this reverse algorithm ensures that these
 nodes are placed in the correct subtree.
 
\end_layout

\begin_layout Section

\series bold
This question is about the MinCutSupertree algorithm from [2].
 
\end_layout

\begin_layout Subsection

\series bold
One of its properties is that it preserves nesting and subtrees that are
 shared by all of the input trees.
 Point where precisely in the algorithm this property is achieved.
 [15 marks] 
\end_layout

\begin_layout Standard
The property of preserving nesting and subtrees that are shared by all of
 the input trees is achieved in line 5 of the pseudocode when the graph
 
\begin_inset Formula $S_{\mathscr{T}}/E_{\mathscr{T}}^{max}$
\end_inset

 is constructed.
 This graph preserves subtrees that occur in all input trees as the edges
 between them will always be contracted when forming 
\begin_inset Formula $S_{\mathscr{T}}/E_{\mathscr{T}}^{max}$
\end_inset

, so they will remain together in the output graph.
 Nesting is also preserved, as if a subtree A is nested within a subtree
 B, then calling MinCutSupertree on B will end up with the nodes of A being
 contracted, preserving this subtree and therefore the nesting.
 
\end_layout

\begin_layout Subsection

\series bold
Argue that the MinCutSupertree algorithm is a generalisation of the Build
 algorithm, i.e.
 show how to encode a constraint from the inputs of the later as a tree,
 which is one of the inputs of the former.
 [10 marks]
\end_layout

\begin_layout Standard
The constraints for the BUILD algorithm can be converted into subtrees by
 considering 2 cases.
 Constraints can only be made up of either 3 or 4 unique nodes for example
 
\series bold

\begin_inset Formula $(i,j)<(k,l)$
\end_inset

 
\series default
or
\series bold
 
\begin_inset Formula $(i,j)<(k,i)$
\end_inset

.
 
\series default
By running the BUILD algorithm on each of these constraints individually,
 we get the 2 tree in the Figure below.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Bio2.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Two possible subtrees
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any constraint that is an input to BUILD can be encoded as one of these
 2 trees, and from here the MinCutSupertree algorithm can be run to give
 us the final tree.
 
\end_layout

\end_body
\end_document
