#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 3 0 7 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bioinformatics Summative Assignment
\end_layout

\begin_layout Author
hzwr87
\end_layout

\begin_layout Section

\series bold
This question is about the Build algorithm from [1].
 
\end_layout

\begin_layout Subsection

\series bold
Explain what the algorithm does and how it works in your own words.
 Do not use pseudocode [25 marks] 
\end_layout

\begin_layout Standard
The BUILD algorithm recursively builds a tree using constraints of the form
 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

where 
\begin_inset Formula $i\neq j$
\end_inset

 and
\begin_inset Formula $k\neq l$
\end_inset

.
 This notation means that the lowest common ancestor of 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 is a proper descendant of the lowest common ancestor of 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

.
 The algorithm itself requires a set of constraints and and a non-empty
 set of nodes.
 If the set of nodes has only 1 element, then the algorithm returns a tree
 consisting of this element alone.
 Otherwise, the set of nodes is partitioned into blocks based on 3 rules.
 
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

 is a constraint, then both 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 are in the same block 
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

 is a constraint, and 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $l$
\end_inset

 are in the same block, then 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, and 
\begin_inset Formula $l$
\end_inset

 are all in the same block.
 .
 
\end_layout

\begin_layout Enumerate
No two nodes are in the same block unless specified by the above rules.
 
\end_layout

\begin_layout Standard
For each of the blocks created by this partitioning method, we find which
 of the original constraints are relevant to each block, which means all
 of 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $k$
\end_inset

, and 
\begin_inset Formula $l$
\end_inset

 are in this block.
 We then call the BUILD algorithm again with this new set of constraints
 and nodes.
 This continues BUILD is called on only 1 node, in which case it returns
 a tree consisting of only this node, which will be a leaf of the overall
 tree, which is built up from these leaves.
\end_layout

\begin_layout Subsection

\series bold
Expand the partition step (given below) in pseudocode compute 
\begin_inset Formula $\pi_{C}=S_{1},S_{2},...S_{r};$
\end_inset

 [20 marks] 
\end_layout

\begin_layout Standard
(4 or 5 lines)
\end_layout

\begin_layout Standard
This is applying the 2 rules
\end_layout

\begin_layout Subsection

\series bold
Write a recurrence that expresses the running time of Build depending on
 the number of dierent leaf-labels n and the number of constraints m.
 Use it to estimate the running time of the algorithm assuming that the
 partitioning step runs in time f (n; m) for some function monotonically
 nondecreasing function f.
 [25 marks]
\end_layout

\begin_layout Subsection

\series bold
Run the algorithm on the following set of constraints.
 You should show the partitioning and the recursive calls at each stage.
 [25 marks]
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(e,f)<(k,d)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,h)<(a,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,n)<(j,l)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,a)<(f,h)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,l)<(e,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(n,l)<(a,f)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(d,i)<(k,n)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(d,i)<(g,i)$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Enumerate

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout

[9.]
\backslash
setcounter{enumi}{9}
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(c,l)<(g,k)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(g,b)<(g,i)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(g,i)<(d,m)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(c,h)<(c,a)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(e,f)<(h,l)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,l)<(j,a)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(k,m)<(e,i)$
\end_inset


\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,b,c,d,e,f,g,h,i,j,k,l,m,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(e,f)<(k,d)$
\end_inset

 , 
\begin_inset Formula $(c,h)<(a,n)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,l)$
\end_inset

 , 
\begin_inset Formula $(c,a)<(f,h)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(e,n)$
\end_inset

 , 
\begin_inset Formula $(n,l)<(a,f)$
\end_inset

 , 
\begin_inset Formula $(d,i)<(k,n)$
\end_inset

 , 
\begin_inset Formula $(d,i)<(g,i)$
\end_inset

 , 
\begin_inset Formula $(c,l)<(g,k)$
\end_inset

 , 
\begin_inset Formula $(g,b)<(g,i)$
\end_inset

 , 
\begin_inset Formula $(g,i)<(d,m)$
\end_inset

 , 
\begin_inset Formula $(c,h)<(c,a)$
\end_inset

 , 
\begin_inset Formula $(e,f)<(h,l)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(j,a)$
\end_inset

 , 
\begin_inset Formula $(k,m)<(e,i)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $e,f$
\end_inset

), (
\begin_inset Formula $a,c,h,j,l,n$
\end_inset

), (
\begin_inset Formula $b,d,g,i$
\end_inset

), (
\begin_inset Formula $k,m$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 gives the blocks (
\begin_inset Formula $a,c,e,f,h,j,l,n$
\end_inset

), (
\begin_inset Formula $b,d,g,i$
\end_inset

), (
\begin_inset Formula $k,m$
\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,c,e,f,h,j,l,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(a,n)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,l)$
\end_inset

 , 
\begin_inset Formula $(c,a)<(f,h)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(e,n)$
\end_inset

 , 
\begin_inset Formula $(n,l)<(a,f)$
\end_inset

 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(c,a)$
\end_inset

 , 
\begin_inset Formula $(e,f)<(h,l)$
\end_inset

 , 
\begin_inset Formula $(j,l)<(j,a)$
\end_inset

 , 
\begin_inset Formula $(j,n)<(j,f)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $a,c,h$
\end_inset

), (
\begin_inset Formula $j,l,n$
\end_inset

), (
\begin_inset Formula $e,f$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a,c,h)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(c,h)<(c,a)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $c,h$
\end_inset

), (
\begin_inset Formula $a$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(c,h)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(c)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node c.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(h)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node h.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(a)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node a.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j,l,n)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(j,n)<(j,l)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $j,n$
\end_inset

), (
\begin_inset Formula $l$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j,n)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(j)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node j.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(n)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node n.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(l)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node l.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(e,f)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(e)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node k.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(f)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node m.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b,d,g,i)$
\end_inset

, (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(d,i)<(g,i)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
 , 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $(g,b)<(g,i)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang british
))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
Applying partition rule 1 gives the blocks (
\begin_inset Formula $d,i$
\end_inset

), (
\begin_inset Formula $b,g$
\end_inset

)
\end_layout

\begin_layout Plain Layout
Applying partition rule 2 changes nothing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(d,i)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(d)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node d.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(i)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node i.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b,g)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(b)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node k.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(g)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node m.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(k,m)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
By partition rule 3, as there are no constraints, these will then be in
 separate blocks.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(k)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node k.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
BUILD(
\begin_inset Formula $(m)$
\end_inset

, ())
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
This returns a tree only containing the node m.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center

\emph on
\begin_inset Graphics
	filename Bio.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Final tree produced by BUILD
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Reverse the Build algorithm, i,e.
 design an algorithm that takes a tree with labeled leaves as an input,
 and produces a set of constraints of the form 
\begin_inset Formula $(i,j)<(k,l)$
\end_inset

, which is consistent only with (an isomorphic copy of) that input.
 Prove the correctness of your algorithm.
 Also, a smaller output (a set of constraints) would give you a better mark.
 [30 marks] 
\end_layout

\begin_layout Section

\series bold
This question is about the MinCutSupertree algorithm from [2].
 
\end_layout

\begin_layout Subsection

\series bold
One of its properties is that it preserves nesting and subtrees that are
 shared by all of the input trees.
 Point where precisely in the algorithm this property is achieved.
 [15 marks] 
\end_layout

\begin_layout Subsection

\series bold
Argue that the MinCutSupertree algorithm is a generalisation of the Build
 algorithm, i.e.
 show how to encode a constraint from the inputs of the later as a tree,
 which is one of the inputs of the former.
 [10 marks]
\end_layout

\end_body
\end_document
